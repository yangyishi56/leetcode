class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> ans = new ArrayList<>();
        
        if(digits == null || digits.equals("")){
            return ans;
        }
        
        Map<Character, char[]> letterMap = new HashMap<>();
        letterMap.put('0', new char[]{});
        letterMap.put('1', new char[]{});
        letterMap.put('2', new char[]{'a', 'b', 'c'});
        letterMap.put('3', new char[]{'d', 'e', 'f'});
        letterMap.put('4', new char[]{'g', 'h', 'i'});
        letterMap.put('5', new char[]{'j', 'k', 'l'});
        letterMap.put('6', new char[]{'m', 'n', 'o'});
        letterMap.put('7', new char[]{'p', 'q', 'r','s'});
        letterMap.put('8', new char[]{'t', 'u', 'v'});
        letterMap.put('9', new char[]{'w', 'x', 'y', 'z'});
        
        StringBuilder sb = new StringBuilder();
        
        letterCombinationHelper(digits, sb, letterMap, ans);
        
        return ans;
    }
    
    
    private void letterCombinationHelper(String digits, StringBuilder sb, Map<Character, char[]> letterMap, List<String> ans){
        
        if(sb.length() == digits.length()){
            ans.add(sb.toString());
            return;
        }
        
        for(char c : letterMap.get(digits.charAt(sb.length()))){
            sb.append(c);
            letterCombinationHelper(digits, sb, letterMap, ans);
            sb.deleteCharAt(sb.length() - 1);
        }
        
        return;
        
    }
}
