Approach #1 DFS

/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;

    public Node() {}

    public Node(int _val,List<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/
class Solution {
    Map<Node, Node> visited = new HashMap<>();
    public Node cloneGraph(Node node) {
        if(node == null){
            return node;
        }
        
        if(visited.containsKey(node)){
            return visited.get(node);
        }
        
        Node cloneNode = new Node(node.val, new ArrayList());
        
        visited.put(node, cloneNode);
        
        for(Node neighbor : node.neighbors){
            cloneNode.neighbors.add(cloneGraph(neighbor));
        }
        
        return cloneNode;
        
    }
}


Approach #2 BFS
Iterate every neighbors of each node, mark vitisted node in hashmap

class Solution {
    public Node cloneGraph(Node node) {
        if(node == null) return node;
        Queue<Node> q = new LinkedList<>();
        HashMap<Node, Node> visited = new HashMap<>();
        
        q.add(node);
        Node cloneNode = new Node(node.val, new ArrayList());
        visited.put(node, cloneNode);
        
        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0; i < size; i++){
                Node cur = q.poll();
                for(Node neighbor : cur.neighbors){
                    if(visited.containsKey(neighbor)){
                        visited.get(cur).neighbors.add(visited.get(neighbor));  //not add new ...
                    }else{
                        Node temp = new Node(neighbor.val, new ArrayList());
                        visited.put(neighbor, temp);
                        visited.get(cur).neighbors.add(temp);
                        q.add(neighbor);   //not add temp
                    }
                }
            }      
        }
        return visited.get(node);
    }
}
